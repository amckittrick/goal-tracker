/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "\n  query GetUser {\n    user {\n      email\n      fullname\n      goals {\n        name\n      }\n    }\n  }\n": typeof types.GetUserDocument,
    "\n  mutation CreateOrUpdateActivity(\n    $goalName: String!,\n    $dateOfActivity: DateTime!,\n    $count: Int!\n  ) {\n    createOrUpdateActivity(\n      goalName: $goalName,\n      dateOfActivity: $dateOfActivity,\n      count: $count\n    ){\n        id\n        name\n        frequency\n        requiredActivitiesPerPeriod\n        dailyActivities {\n          id\n          goalId\n          year\n          month\n          day\n          count\n        }\n        weeklyActivities {\n          id\n          goalId\n          year\n          month\n          week\n          count\n        }\n        yearlyActivities {\n          id\n          goalId\n          year\n          count\n        }\n    }\n  }\n": typeof types.CreateOrUpdateActivityDocument,
    "\n  mutation CreateGoal(\n    $goalName: String!,\n    $frequency: GoalFrequencyType!,\n    $requiredActivitiesPerPeriod: Int!\n  ) {\n    createGoal(\n      name: $goalName,\n      frequency: $frequency,\n      requiredActivitiesPerPeriod: $requiredActivitiesPerPeriod\n    ){\n      id\n      email\n      fullname\n      goals {\n        id\n        name\n        frequency\n        requiredActivitiesPerPeriod\n        dailyActivities {\n          id\n          goalId\n          year\n          month\n          day\n          count\n        }\n        weeklyActivities {\n          id\n          goalId\n          year\n          month\n          week\n          count\n        }\n        yearlyActivities {\n          id\n          goalId\n          year\n          count\n        }\n      }\n    }\n  }\n": typeof types.CreateGoalDocument,
    "\n  mutation addGoalToUser($additionalUserEmail: String!, $goalName: String!) {\n      addGoalToUser(additionalUserEmail: $additionalUserEmail, goalName: $goalName) {\n        id\n        email\n        fullname\n        goals {\n          id\n          name\n          frequency\n          requiredActivitiesPerPeriod\n          dailyActivities {\n            id\n            goalId\n            year\n            month\n            day\n            count\n          }\n          weeklyActivities {\n            id\n            goalId\n            year\n            month\n            week\n            count\n          }\n          yearlyActivities {\n            id\n            goalId\n            year\n            count\n          }\n        }\n      }\n  }\n": typeof types.AddGoalToUserDocument,
    "\n  mutation DeleteGoal($goalName: String!) {\n    deleteGoal(name: $goalName) {\n      id\n      email\n      fullname\n      goals {\n        id\n        name\n        frequency\n        requiredActivitiesPerPeriod\n        dailyActivities {\n          id\n          goalId\n          year\n          month\n          day\n          count\n        }\n        weeklyActivities {\n          id\n          goalId\n          year\n          month\n          week\n          count\n        }\n        yearlyActivities {\n          id\n          goalId\n          year\n          count\n        }\n      }\n    }\n  }\n": typeof types.DeleteGoalDocument,
    "\n  mutation renameGoal($currentGoalName: String!, $newGoalName: String!) {\n      renameGoal(currentGoalName: $currentGoalName, newGoalName: $newGoalName) {\n        id\n        name\n        frequency\n        requiredActivitiesPerPeriod\n        dailyActivities {\n          id\n          goalId\n          year\n          month\n          day\n          count\n        }\n        weeklyActivities {\n          id\n          goalId\n          year\n          month\n          week\n          count\n        }\n        yearlyActivities {\n          id\n          goalId\n          year\n          count\n        }\n      }\n  }\n": typeof types.RenameGoalDocument,
    "\n  query getEncouragement {\n    encouragement {\n      id\n      author\n      quote\n    }\n  }\n": typeof types.GetEncouragementDocument,
    "\n  query getUserStatus($duration: DisplayDuration!, $dateToCheck: DateTime!) {\n    userStatus(duration: $duration, dateToCheck: $dateToCheck) {\n      name\n      frequency\n      dates\n      statuses\n    }\n  }\n": typeof types.GetUserStatusDocument,
};
const documents: Documents = {
    "\n  query GetUser {\n    user {\n      email\n      fullname\n      goals {\n        name\n      }\n    }\n  }\n": types.GetUserDocument,
    "\n  mutation CreateOrUpdateActivity(\n    $goalName: String!,\n    $dateOfActivity: DateTime!,\n    $count: Int!\n  ) {\n    createOrUpdateActivity(\n      goalName: $goalName,\n      dateOfActivity: $dateOfActivity,\n      count: $count\n    ){\n        id\n        name\n        frequency\n        requiredActivitiesPerPeriod\n        dailyActivities {\n          id\n          goalId\n          year\n          month\n          day\n          count\n        }\n        weeklyActivities {\n          id\n          goalId\n          year\n          month\n          week\n          count\n        }\n        yearlyActivities {\n          id\n          goalId\n          year\n          count\n        }\n    }\n  }\n": types.CreateOrUpdateActivityDocument,
    "\n  mutation CreateGoal(\n    $goalName: String!,\n    $frequency: GoalFrequencyType!,\n    $requiredActivitiesPerPeriod: Int!\n  ) {\n    createGoal(\n      name: $goalName,\n      frequency: $frequency,\n      requiredActivitiesPerPeriod: $requiredActivitiesPerPeriod\n    ){\n      id\n      email\n      fullname\n      goals {\n        id\n        name\n        frequency\n        requiredActivitiesPerPeriod\n        dailyActivities {\n          id\n          goalId\n          year\n          month\n          day\n          count\n        }\n        weeklyActivities {\n          id\n          goalId\n          year\n          month\n          week\n          count\n        }\n        yearlyActivities {\n          id\n          goalId\n          year\n          count\n        }\n      }\n    }\n  }\n": types.CreateGoalDocument,
    "\n  mutation addGoalToUser($additionalUserEmail: String!, $goalName: String!) {\n      addGoalToUser(additionalUserEmail: $additionalUserEmail, goalName: $goalName) {\n        id\n        email\n        fullname\n        goals {\n          id\n          name\n          frequency\n          requiredActivitiesPerPeriod\n          dailyActivities {\n            id\n            goalId\n            year\n            month\n            day\n            count\n          }\n          weeklyActivities {\n            id\n            goalId\n            year\n            month\n            week\n            count\n          }\n          yearlyActivities {\n            id\n            goalId\n            year\n            count\n          }\n        }\n      }\n  }\n": types.AddGoalToUserDocument,
    "\n  mutation DeleteGoal($goalName: String!) {\n    deleteGoal(name: $goalName) {\n      id\n      email\n      fullname\n      goals {\n        id\n        name\n        frequency\n        requiredActivitiesPerPeriod\n        dailyActivities {\n          id\n          goalId\n          year\n          month\n          day\n          count\n        }\n        weeklyActivities {\n          id\n          goalId\n          year\n          month\n          week\n          count\n        }\n        yearlyActivities {\n          id\n          goalId\n          year\n          count\n        }\n      }\n    }\n  }\n": types.DeleteGoalDocument,
    "\n  mutation renameGoal($currentGoalName: String!, $newGoalName: String!) {\n      renameGoal(currentGoalName: $currentGoalName, newGoalName: $newGoalName) {\n        id\n        name\n        frequency\n        requiredActivitiesPerPeriod\n        dailyActivities {\n          id\n          goalId\n          year\n          month\n          day\n          count\n        }\n        weeklyActivities {\n          id\n          goalId\n          year\n          month\n          week\n          count\n        }\n        yearlyActivities {\n          id\n          goalId\n          year\n          count\n        }\n      }\n  }\n": types.RenameGoalDocument,
    "\n  query getEncouragement {\n    encouragement {\n      id\n      author\n      quote\n    }\n  }\n": types.GetEncouragementDocument,
    "\n  query getUserStatus($duration: DisplayDuration!, $dateToCheck: DateTime!) {\n    userStatus(duration: $duration, dateToCheck: $dateToCheck) {\n      name\n      frequency\n      dates\n      statuses\n    }\n  }\n": types.GetUserStatusDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetUser {\n    user {\n      email\n      fullname\n      goals {\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetUser {\n    user {\n      email\n      fullname\n      goals {\n        name\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation CreateOrUpdateActivity(\n    $goalName: String!,\n    $dateOfActivity: DateTime!,\n    $count: Int!\n  ) {\n    createOrUpdateActivity(\n      goalName: $goalName,\n      dateOfActivity: $dateOfActivity,\n      count: $count\n    ){\n        id\n        name\n        frequency\n        requiredActivitiesPerPeriod\n        dailyActivities {\n          id\n          goalId\n          year\n          month\n          day\n          count\n        }\n        weeklyActivities {\n          id\n          goalId\n          year\n          month\n          week\n          count\n        }\n        yearlyActivities {\n          id\n          goalId\n          year\n          count\n        }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateOrUpdateActivity(\n    $goalName: String!,\n    $dateOfActivity: DateTime!,\n    $count: Int!\n  ) {\n    createOrUpdateActivity(\n      goalName: $goalName,\n      dateOfActivity: $dateOfActivity,\n      count: $count\n    ){\n        id\n        name\n        frequency\n        requiredActivitiesPerPeriod\n        dailyActivities {\n          id\n          goalId\n          year\n          month\n          day\n          count\n        }\n        weeklyActivities {\n          id\n          goalId\n          year\n          month\n          week\n          count\n        }\n        yearlyActivities {\n          id\n          goalId\n          year\n          count\n        }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation CreateGoal(\n    $goalName: String!,\n    $frequency: GoalFrequencyType!,\n    $requiredActivitiesPerPeriod: Int!\n  ) {\n    createGoal(\n      name: $goalName,\n      frequency: $frequency,\n      requiredActivitiesPerPeriod: $requiredActivitiesPerPeriod\n    ){\n      id\n      email\n      fullname\n      goals {\n        id\n        name\n        frequency\n        requiredActivitiesPerPeriod\n        dailyActivities {\n          id\n          goalId\n          year\n          month\n          day\n          count\n        }\n        weeklyActivities {\n          id\n          goalId\n          year\n          month\n          week\n          count\n        }\n        yearlyActivities {\n          id\n          goalId\n          year\n          count\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateGoal(\n    $goalName: String!,\n    $frequency: GoalFrequencyType!,\n    $requiredActivitiesPerPeriod: Int!\n  ) {\n    createGoal(\n      name: $goalName,\n      frequency: $frequency,\n      requiredActivitiesPerPeriod: $requiredActivitiesPerPeriod\n    ){\n      id\n      email\n      fullname\n      goals {\n        id\n        name\n        frequency\n        requiredActivitiesPerPeriod\n        dailyActivities {\n          id\n          goalId\n          year\n          month\n          day\n          count\n        }\n        weeklyActivities {\n          id\n          goalId\n          year\n          month\n          week\n          count\n        }\n        yearlyActivities {\n          id\n          goalId\n          year\n          count\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation addGoalToUser($additionalUserEmail: String!, $goalName: String!) {\n      addGoalToUser(additionalUserEmail: $additionalUserEmail, goalName: $goalName) {\n        id\n        email\n        fullname\n        goals {\n          id\n          name\n          frequency\n          requiredActivitiesPerPeriod\n          dailyActivities {\n            id\n            goalId\n            year\n            month\n            day\n            count\n          }\n          weeklyActivities {\n            id\n            goalId\n            year\n            month\n            week\n            count\n          }\n          yearlyActivities {\n            id\n            goalId\n            year\n            count\n          }\n        }\n      }\n  }\n"): (typeof documents)["\n  mutation addGoalToUser($additionalUserEmail: String!, $goalName: String!) {\n      addGoalToUser(additionalUserEmail: $additionalUserEmail, goalName: $goalName) {\n        id\n        email\n        fullname\n        goals {\n          id\n          name\n          frequency\n          requiredActivitiesPerPeriod\n          dailyActivities {\n            id\n            goalId\n            year\n            month\n            day\n            count\n          }\n          weeklyActivities {\n            id\n            goalId\n            year\n            month\n            week\n            count\n          }\n          yearlyActivities {\n            id\n            goalId\n            year\n            count\n          }\n        }\n      }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation DeleteGoal($goalName: String!) {\n    deleteGoal(name: $goalName) {\n      id\n      email\n      fullname\n      goals {\n        id\n        name\n        frequency\n        requiredActivitiesPerPeriod\n        dailyActivities {\n          id\n          goalId\n          year\n          month\n          day\n          count\n        }\n        weeklyActivities {\n          id\n          goalId\n          year\n          month\n          week\n          count\n        }\n        yearlyActivities {\n          id\n          goalId\n          year\n          count\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteGoal($goalName: String!) {\n    deleteGoal(name: $goalName) {\n      id\n      email\n      fullname\n      goals {\n        id\n        name\n        frequency\n        requiredActivitiesPerPeriod\n        dailyActivities {\n          id\n          goalId\n          year\n          month\n          day\n          count\n        }\n        weeklyActivities {\n          id\n          goalId\n          year\n          month\n          week\n          count\n        }\n        yearlyActivities {\n          id\n          goalId\n          year\n          count\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation renameGoal($currentGoalName: String!, $newGoalName: String!) {\n      renameGoal(currentGoalName: $currentGoalName, newGoalName: $newGoalName) {\n        id\n        name\n        frequency\n        requiredActivitiesPerPeriod\n        dailyActivities {\n          id\n          goalId\n          year\n          month\n          day\n          count\n        }\n        weeklyActivities {\n          id\n          goalId\n          year\n          month\n          week\n          count\n        }\n        yearlyActivities {\n          id\n          goalId\n          year\n          count\n        }\n      }\n  }\n"): (typeof documents)["\n  mutation renameGoal($currentGoalName: String!, $newGoalName: String!) {\n      renameGoal(currentGoalName: $currentGoalName, newGoalName: $newGoalName) {\n        id\n        name\n        frequency\n        requiredActivitiesPerPeriod\n        dailyActivities {\n          id\n          goalId\n          year\n          month\n          day\n          count\n        }\n        weeklyActivities {\n          id\n          goalId\n          year\n          month\n          week\n          count\n        }\n        yearlyActivities {\n          id\n          goalId\n          year\n          count\n        }\n      }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getEncouragement {\n    encouragement {\n      id\n      author\n      quote\n    }\n  }\n"): (typeof documents)["\n  query getEncouragement {\n    encouragement {\n      id\n      author\n      quote\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getUserStatus($duration: DisplayDuration!, $dateToCheck: DateTime!) {\n    userStatus(duration: $duration, dateToCheck: $dateToCheck) {\n      name\n      frequency\n      dates\n      statuses\n    }\n  }\n"): (typeof documents)["\n  query getUserStatus($duration: DisplayDuration!, $dateToCheck: DateTime!) {\n    userStatus(duration: $duration, dateToCheck: $dateToCheck) {\n      name\n      frequency\n      dates\n      statuses\n    }\n  }\n"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;